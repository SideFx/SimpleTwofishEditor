//----------------------------------------------------------------------------------------------------------------------
// (w) 2023-2024 by Jan Buchholz
// Twofish Go port based on Bruce Schneier's reference C implementation
// https://www.schneier.com/academic/twofish/
//----------------------------------------------------------------------------------------------------------------------

package crypto

const TwofishBlocksize uint32 = 16
const TwofishKeysize uint32 = 32
const rsMod uint32 = 0x14d
const rho uint32 = 0x01010101
const uint32Bits byte = 32
const cbcRounds uint32 = 1234

type TfBlock [TwofishBlocksize]byte
type TfKey [TwofishKeysize]byte

type Twofish struct {
	q0 [256]byte
	q1 [256]byte
	q2 [256]byte
	q3 [256]byte
	rs [4][8]byte
	qf [4][256]uint32
	k0 [40]uint32
	c0 ShaResult //CBC only
}

func NewTwofishWithEnclave() Twofish {
	return NewTwofish(Pop())
}

func NewTwofish(p TfKey) Twofish {
	const k uint32 = 4
	var i, j, a, b, z uint32
	var s = []uint32{0, 0, 0, 0}
	var mke = []uint32{0, 0, 0, 0}
	var mko = []uint32{0, 0, 0, 0}
	var key = []uint32{0, 0, 0, 0, 0, 0, 0, 0}
	var vector = []byte{0, 0, 0, 0, 0, 0, 0, 0}
	var mkey [TwofishKeysize]byte
	var y0, y1, y2, y3 byte
	tfish := Twofish{}
	tfish.q0 = [...]byte{
		0xa9, 0x67, 0xb3, 0xe8, 0x04, 0xfd, 0xa3, 0x76, 0x9a, 0x92, 0x80, 0x78, 0xe4, 0xdd, 0xd1, 0x38,
		0x0d, 0xc6, 0x35, 0x98, 0x18, 0xf7, 0xec, 0x6c, 0x43, 0x75, 0x37, 0x26, 0xfa, 0x13, 0x94, 0x48,
		0xf2, 0xd0, 0x8b, 0x30, 0x84, 0x54, 0xdf, 0x23, 0x19, 0x5b, 0x3d, 0x59, 0xf3, 0xae, 0xa2, 0x82,
		0x63, 0x01, 0x83, 0x2e, 0xd9, 0x51, 0x9b, 0x7c, 0xa6, 0xeb, 0xa5, 0xbe, 0x16, 0x0c, 0xe3, 0x61,
		0xc0, 0x8c, 0x3a, 0xf5, 0x73, 0x2c, 0x25, 0x0b, 0xbb, 0x4e, 0x89, 0x6b, 0x53, 0x6a, 0xb4, 0xf1,
		0xe1, 0xe6, 0xbd, 0x45, 0xe2, 0xf4, 0xb6, 0x66, 0xcc, 0x95, 0x03, 0x56, 0xd4, 0x1c, 0x1e, 0xd7,
		0xfb, 0xc3, 0x8e, 0xb5, 0xe9, 0xcf, 0xbf, 0xba, 0xea, 0x77, 0x39, 0xaf, 0x33, 0xc9, 0x62, 0x71,
		0x81, 0x79, 0x09, 0xad, 0x24, 0xcd, 0xf9, 0xd8, 0xe5, 0xc5, 0xb9, 0x4d, 0x44, 0x08, 0x86, 0xe7,
		0xa1, 0x1d, 0xaa, 0xed, 0x06, 0x70, 0xb2, 0xd2, 0x41, 0x7b, 0xa0, 0x11, 0x31, 0xc2, 0x27, 0x90,
		0x20, 0xf6, 0x60, 0xff, 0x96, 0x5c, 0xb1, 0xab, 0x9e, 0x9c, 0x52, 0x1b, 0x5f, 0x93, 0x0a, 0xef,
		0x91, 0x85, 0x49, 0xee, 0x2d, 0x4f, 0x8f, 0x3b, 0x47, 0x87, 0x6d, 0x46, 0xd6, 0x3e, 0x69, 0x64,
		0x2a, 0xce, 0xcb, 0x2f, 0xfc, 0x97, 0x05, 0x7a, 0xac, 0x7f, 0xd5, 0x1a, 0x4b, 0x0e, 0xa7, 0x5a,
		0x28, 0x14, 0x3f, 0x29, 0x88, 0x3c, 0x4c, 0x02, 0xb8, 0xda, 0xb0, 0x17, 0x55, 0x1f, 0x8a, 0x7d,
		0x57, 0xc7, 0x8d, 0x74, 0xb7, 0xc4, 0x9f, 0x72, 0x7e, 0x15, 0x22, 0x12, 0x58, 0x07, 0x99, 0x34,
		0x6e, 0x50, 0xde, 0x68, 0x65, 0xbc, 0xdb, 0xf8, 0xc8, 0xa8, 0x2b, 0x40, 0xdc, 0xfe, 0x32, 0xa4,
		0xca, 0x10, 0x21, 0xf0, 0xd3, 0x5d, 0x0f, 0x00, 0x6f, 0x9d, 0x36, 0x42, 0x4a, 0x5e, 0xc1, 0xe0}
	tfish.q1 = [...]byte{
		0x75, 0xf3, 0xc6, 0xf4, 0xdb, 0x7b, 0xfb, 0xc8, 0x4a, 0xd3, 0xe6, 0x6b, 0x45, 0x7d, 0xe8, 0x4b,
		0xd6, 0x32, 0xd8, 0xfd, 0x37, 0x71, 0xf1, 0xe1, 0x30, 0x0f, 0xf8, 0x1b, 0x87, 0xfa, 0x06, 0x3f,
		0x5e, 0xba, 0xae, 0x5b, 0x8a, 0x00, 0xbc, 0x9d, 0x6d, 0xc1, 0xb1, 0x0e, 0x80, 0x5d, 0xd2, 0xd5,
		0xa0, 0x84, 0x07, 0x14, 0xb5, 0x90, 0x2c, 0xa3, 0xb2, 0x73, 0x4c, 0x54, 0x92, 0x74, 0x36, 0x51,
		0x38, 0xb0, 0xbd, 0x5a, 0xfc, 0x60, 0x62, 0x96, 0x6c, 0x42, 0xf7, 0x10, 0x7c, 0x28, 0x27, 0x8c,
		0x13, 0x95, 0x9c, 0xc7, 0x24, 0x46, 0x3b, 0x70, 0xca, 0xe3, 0x85, 0xcb, 0x11, 0xd0, 0x93, 0xb8,
		0xa6, 0x83, 0x20, 0xff, 0x9f, 0x77, 0xc3, 0xcc, 0x03, 0x6f, 0x08, 0xbf, 0x40, 0xe7, 0x2b, 0xe2,
		0x79, 0x0c, 0xaa, 0x82, 0x41, 0x3a, 0xea, 0xb9, 0xe4, 0x9a, 0xa4, 0x97, 0x7e, 0xda, 0x7a, 0x17,
		0x66, 0x94, 0xa1, 0x1d, 0x3d, 0xf0, 0xde, 0xb3, 0x0b, 0x72, 0xa7, 0x1c, 0xef, 0xd1, 0x53, 0x3e,
		0x8f, 0x33, 0x26, 0x5f, 0xec, 0x76, 0x2a, 0x49, 0x81, 0x88, 0xee, 0x21, 0xc4, 0x1a, 0xeb, 0xd9,
		0xc5, 0x39, 0x99, 0xcd, 0xad, 0x31, 0x8b, 0x01, 0x18, 0x23, 0xdd, 0x1f, 0x4e, 0x2d, 0xf9, 0x48,
		0x4f, 0xf2, 0x65, 0x8e, 0x78, 0x5c, 0x58, 0x19, 0x8d, 0xe5, 0x98, 0x57, 0x67, 0x7f, 0x05, 0x64,
		0xaf, 0x63, 0xb6, 0xfe, 0xf5, 0xb7, 0x3c, 0xa5, 0xce, 0xe9, 0x68, 0x44, 0xe0, 0x4d, 0x43, 0x69,
		0x29, 0x2e, 0xac, 0x15, 0x59, 0xa8, 0x0a, 0x9e, 0x6e, 0x47, 0xdf, 0x34, 0x35, 0x6a, 0xcf, 0xdc,
		0x22, 0xc9, 0xc0, 0x9b, 0x89, 0xd4, 0xed, 0xab, 0x12, 0xa2, 0x0d, 0x52, 0xbb, 0x02, 0x2f, 0xa9,
		0xd7, 0x61, 0x1e, 0xb4, 0x50, 0x04, 0xf6, 0xc2, 0x16, 0x25, 0x86, 0x56, 0x55, 0x09, 0xbe, 0x91}
	tfish.q2 = [...]byte{
		0x00, 0x5b, 0xb6, 0xed, 0x05, 0x5e, 0xb3, 0xe8, 0x0a, 0x51, 0xbc, 0xe7, 0x0f, 0x54, 0xb9, 0xe2,
		0x14, 0x4f, 0xa2, 0xf9, 0x11, 0x4a, 0xa7, 0xfc, 0x1e, 0x45, 0xa8, 0xf3, 0x1b, 0x40, 0xad, 0xf6,
		0x28, 0x73, 0x9e, 0xc5, 0x2d, 0x76, 0x9b, 0xc0, 0x22, 0x79, 0x94, 0xcf, 0x27, 0x7c, 0x91, 0xca,
		0x3c, 0x67, 0x8a, 0xd1, 0x39, 0x62, 0x8f, 0xd4, 0x36, 0x6d, 0x80, 0xdb, 0x33, 0x68, 0x85, 0xde,
		0x50, 0x0b, 0xe6, 0xbd, 0x55, 0x0e, 0xe3, 0xb8, 0x5a, 0x01, 0xec, 0xb7, 0x5f, 0x04, 0xe9, 0xb2,
		0x44, 0x1f, 0xf2, 0xa9, 0x41, 0x1a, 0xf7, 0xac, 0x4e, 0x15, 0xf8, 0xa3, 0x4b, 0x10, 0xfd, 0xa6,
		0x78, 0x23, 0xce, 0x95, 0x7d, 0x26, 0xcb, 0x90, 0x72, 0x29, 0xc4, 0x9f, 0x77, 0x2c, 0xc1, 0x9a,
		0x6c, 0x37, 0xda, 0x81, 0x69, 0x32, 0xdf, 0x84, 0x66, 0x3d, 0xd0, 0x8b, 0x63, 0x38, 0xd5, 0x8e,
		0xa0, 0xfb, 0x16, 0x4d, 0xa5, 0xfe, 0x13, 0x48, 0xaa, 0xf1, 0x1c, 0x47, 0xaf, 0xf4, 0x19, 0x42,
		0xb4, 0xef, 0x02, 0x59, 0xb1, 0xea, 0x07, 0x5c, 0xbe, 0xe5, 0x08, 0x53, 0xbb, 0xe0, 0x0d, 0x56,
		0x88, 0xd3, 0x3e, 0x65, 0x8d, 0xd6, 0x3b, 0x60, 0x82, 0xd9, 0x34, 0x6f, 0x87, 0xdc, 0x31, 0x6a,
		0x9c, 0xc7, 0x2a, 0x71, 0x99, 0xc2, 0x2f, 0x74, 0x96, 0xcd, 0x20, 0x7b, 0x93, 0xc8, 0x25, 0x7e,
		0xf0, 0xab, 0x46, 0x1d, 0xf5, 0xae, 0x43, 0x18, 0xfa, 0xa1, 0x4c, 0x17, 0xff, 0xa4, 0x49, 0x12,
		0xe4, 0xbf, 0x52, 0x09, 0xe1, 0xba, 0x57, 0x0c, 0xee, 0xb5, 0x58, 0x03, 0xeb, 0xb0, 0x5d, 0x06,
		0xd8, 0x83, 0x6e, 0x35, 0xdd, 0x86, 0x6b, 0x30, 0xd2, 0x89, 0x64, 0x3f, 0xd7, 0x8c, 0x61, 0x3a,
		0xcc, 0x97, 0x7a, 0x21, 0xc9, 0x92, 0x7f, 0x24, 0xc6, 0x9d, 0x70, 0x2b, 0xc3, 0x98, 0x75, 0x2e}
	tfish.q3 = [...]byte{
		0x00, 0xef, 0xb7, 0x58, 0x07, 0xe8, 0xb0, 0x5f, 0x0e, 0xe1, 0xb9, 0x56, 0x09, 0xe6, 0xbe, 0x51,
		0x1c, 0xf3, 0xab, 0x44, 0x1b, 0xf4, 0xac, 0x43, 0x12, 0xfd, 0xa5, 0x4a, 0x15, 0xfa, 0xa2, 0x4d,
		0x38, 0xd7, 0x8f, 0x60, 0x3f, 0xd0, 0x88, 0x67, 0x36, 0xd9, 0x81, 0x6e, 0x31, 0xde, 0x86, 0x69,
		0x24, 0xcb, 0x93, 0x7c, 0x23, 0xcc, 0x94, 0x7b, 0x2a, 0xc5, 0x9d, 0x72, 0x2d, 0xc2, 0x9a, 0x75,
		0x70, 0x9f, 0xc7, 0x28, 0x77, 0x98, 0xc0, 0x2f, 0x7e, 0x91, 0xc9, 0x26, 0x79, 0x96, 0xce, 0x21,
		0x6c, 0x83, 0xdb, 0x34, 0x6b, 0x84, 0xdc, 0x33, 0x62, 0x8d, 0xd5, 0x3a, 0x65, 0x8a, 0xd2, 0x3d,
		0x48, 0xa7, 0xff, 0x10, 0x4f, 0xa0, 0xf8, 0x17, 0x46, 0xa9, 0xf1, 0x1e, 0x41, 0xae, 0xf6, 0x19,
		0x54, 0xbb, 0xe3, 0x0c, 0x53, 0xbc, 0xe4, 0x0b, 0x5a, 0xb5, 0xed, 0x02, 0x5d, 0xb2, 0xea, 0x05,
		0xe0, 0x0f, 0x57, 0xb8, 0xe7, 0x08, 0x50, 0xbf, 0xee, 0x01, 0x59, 0xb6, 0xe9, 0x06, 0x5e, 0xb1,
		0xfc, 0x13, 0x4b, 0xa4, 0xfb, 0x14, 0x4c, 0xa3, 0xf2, 0x1d, 0x45, 0xaa, 0xf5, 0x1a, 0x42, 0xad,
		0xd8, 0x37, 0x6f, 0x80, 0xdf, 0x30, 0x68, 0x87, 0xd6, 0x39, 0x61, 0x8e, 0xd1, 0x3e, 0x66, 0x89,
		0xc4, 0x2b, 0x73, 0x9c, 0xc3, 0x2c, 0x74, 0x9b, 0xca, 0x25, 0x7d, 0x92, 0xcd, 0x22, 0x7a, 0x95,
		0x90, 0x7f, 0x27, 0xc8, 0x97, 0x78, 0x20, 0xcf, 0x9e, 0x71, 0x29, 0xc6, 0x99, 0x76, 0x2e, 0xc1,
		0x8c, 0x63, 0x3b, 0xd4, 0x8b, 0x64, 0x3c, 0xd3, 0x82, 0x6d, 0x35, 0xda, 0x85, 0x6a, 0x32, 0xdd,
		0xa8, 0x47, 0x1f, 0xf0, 0xaf, 0x40, 0x18, 0xf7, 0xa6, 0x49, 0x11, 0xfe, 0xa1, 0x4e, 0x16, 0xf9,
		0xb4, 0x5b, 0x03, 0xec, 0xb3, 0x5c, 0x04, 0xeb, 0xba, 0x55, 0x0d, 0xe2, 0xbd, 0x52, 0x0a, 0xe5}
	tfish.rs = [4][8]byte{
		{0x01, 0xa4, 0x55, 0x87, 0x5a, 0x58, 0xdb, 0x9e}, {0xa4, 0x56, 0x82, 0xf3, 0x1e, 0xc6, 0x68, 0xe5},
		{0x02, 0xa1, 0xfc, 0xc1, 0x47, 0xae, 0x3d, 0x19}, {0xa4, 0x55, 0x87, 0x5a, 0x58, 0xdb, 0x9e, 0x03}}
	// Initialize cipher block chaining (CBC)
	sha := NewSha512()
	tfish.c0 = sha.Compute(p[:])
	for i = 0; i < cbcRounds; i++ {
		tfish.c0 = sha.Compute(tfish.c0[:])
	}
	// Start of standard Twofish
	j = 0
	for i = 0; i < TwofishKeysize; i++ {
		if j >= uint32(len(p)) {
			j = 0
		}
		mkey[i] = p[j]
		j++
	}
	for i = 0; i < TwofishKeysize/4; i++ {
		key[i] = (uint32(mkey[4*i+3]) << 24) | (uint32(mkey[4*i+2]) << 16) | (uint32(mkey[4*i+1]) << 8) | uint32(mkey[4*i])
	}
	mkey = [TwofishKeysize]byte{}
	for i = 0; i < k; i++ {
		mke[i] = key[2*i]
		mko[i] = key[2*i+1]
	}
	key = nil
	for i = 0; i < k; i++ {
		for j = 0; j < 4; j++ {
			vector[j] = byte(mke[i] >> (j << 3))
			vector[j+4] = byte(mko[i] >> (j << 3))
		}
		s[k-i-1] = tfish.rsMatrixMultiply(vector)
	}
	vector = nil
	for z = 0; z < 20; z++ {
		a = tfish.hFunc(2*z*rho, mke)
		b = rol32(tfish.hFunc(2*z*rho+rho, mko), 8)
		tfish.k0[2*z] = a + b
		tfish.k0[2*z+1] = rol32(a+2*b, 9)
	}
	for i = 0; i < 256; i++ {
		y0 = byte(i)
		y1 = byte(i)
		y2 = byte(i)
		y3 = byte(i)
		y0 = tfish.q1[y0] ^ byte(s[3])
		y1 = tfish.q0[y1] ^ byte(s[3]>>8)
		y2 = tfish.q0[y2] ^ byte(s[3]>>16)
		y3 = tfish.q1[y3] ^ byte(s[3]>>24)
		y0 = tfish.q1[y0] ^ byte(s[2])
		y1 = tfish.q1[y1] ^ byte(s[2]>>8)
		y2 = tfish.q0[y2] ^ byte(s[2]>>16)
		y3 = tfish.q0[y3] ^ byte(s[2]>>24)
		y0 = tfish.q1[tfish.q0[tfish.q0[y0]^byte(s[1])]^byte(s[0])]
		y1 = tfish.q0[tfish.q0[tfish.q1[y1]^byte(s[1]>>8)]^byte(s[0]>>8)]
		y2 = tfish.q1[tfish.q1[tfish.q0[y2]^byte(s[1]>>16)]^byte(s[0]>>16)]
		y3 = tfish.q0[tfish.q1[tfish.q1[y3]^byte(s[1]>>24)]^byte(s[0]>>24)]
		tfish.qf[0][i] = (uint32(tfish.q3[y0]) << 24) | (uint32(tfish.q3[y0]) << 16) | (uint32(tfish.q2[y0]) << 8) | uint32(y0)
		tfish.qf[1][i] = (uint32(y1) << 24) | (uint32(tfish.q2[y1]) << 16) | (uint32(tfish.q3[y1]) << 8) | uint32(tfish.q3[y1])
		tfish.qf[2][i] = (uint32(tfish.q3[y2]) << 24) | (uint32(y2) << 16) | (uint32(tfish.q3[y2]) << 8) | uint32(tfish.q2[y2])
		tfish.qf[3][i] = (uint32(tfish.q2[y3]) << 24) | (uint32(tfish.q3[y3]) << 16) | (uint32(y3) << 8) | uint32(tfish.q2[y3])
	}
	return tfish
}

func polyMult(a uint32, b uint32) uint32 {
	var t uint32 = 0
	for a != 0 {
		if a&0x01 != 0 {
			t ^= b
		}
		b <<= 1
		a >>= 1
	}
	return t
}

func gfMod(a uint32, m uint32) uint32 {
	var x uint32
	var i int
	m <<= 7
	for i = 0; i < 8; i++ {
		x = a ^ m
		if x < a {
			a = x
		}
		m >>= 1
	}
	return a
}

func gfMult(a uint32, b uint32, m uint32) uint32 {
	return gfMod(polyMult(a, b), m)
}

func rol32(a uint32, n byte) uint32 {
	n &= 0x1f
	return (a << n) | (a >> (uint32Bits - n))
}

func ror32(a uint32, n byte) uint32 {
	n &= 0x1f
	return (a >> n) | (a << (uint32Bits - n))
}

func (tfish Twofish) rsMatrixMultiply(c []byte) uint32 {
	var j, k int
	var t byte
	var r = [4]byte{0, 0, 0, 0}
	for j = 0; j < 4; j++ {
		t = 0
		for k = 0; k < 8; k++ {
			t ^= byte(gfMult(uint32(tfish.rs[j][k]), uint32(c[k]), rsMod))
		}
		r[3-j] = t
	}
	return (uint32(r[0]) << 24) ^ (uint32(r[1]) << 16) ^ (uint32(r[2]) << 8) ^ uint32(r[3])
}

func (tfish Twofish) gFunc(a uint32) uint32 {
	return tfish.qf[0][(a&0xff)] ^ tfish.qf[1][((a>>8)&0xff)] ^ tfish.qf[2][((a>>16)&0xff)] ^ tfish.qf[3][((a>>24)&0xff)]
}

func (tfish Twofish) hFunc(a uint32, x []uint32) uint32 {
	var y0, y1, y2, y3, z0, z1, z2, z3 byte
	y0 = byte(a)
	y1 = byte(a >> 8)
	y2 = byte(a >> 16)
	y3 = byte(a >> 24)
	y0 = tfish.q1[y0] ^ byte(x[3])
	y1 = tfish.q0[y1] ^ byte(x[3]>>8)
	y2 = tfish.q0[y2] ^ byte(x[3]>>16)
	y3 = tfish.q1[y3] ^ byte(x[3]>>24)
	y0 = tfish.q1[y0] ^ byte(x[2])
	y1 = tfish.q1[y1] ^ byte(x[2]>>8)
	y2 = tfish.q0[y2] ^ byte(x[2]>>16)
	y3 = tfish.q0[y3] ^ byte(x[2]>>24)
	y0 = tfish.q1[tfish.q0[tfish.q0[y0]^byte(x[1])]^byte(x[0])]
	y1 = tfish.q0[tfish.q0[tfish.q1[y1]^byte(x[1]>>8)]^byte(x[0]>>8)]
	y2 = tfish.q1[tfish.q1[tfish.q0[y2]^byte(x[1]>>16)]^byte(x[0]>>16)]
	y3 = tfish.q0[tfish.q1[tfish.q1[y3]^byte(x[1]>>24)]^byte(x[0]>>24)]
	z0 = tfish.q3[y0] ^ y1 ^ tfish.q3[y2] ^ tfish.q2[y3]
	z1 = tfish.q3[y0] ^ tfish.q2[y1] ^ y2 ^ tfish.q3[y3]
	z2 = tfish.q2[y0] ^ tfish.q3[y1] ^ tfish.q3[y2] ^ y3
	z3 = y0 ^ tfish.q3[y1] ^ tfish.q2[y2] ^ tfish.q2[y3]
	return (uint32(z0) << 24) ^ (uint32(z1) << 16) ^ (uint32(z2) << 8) ^ uint32(z3)
}

func (tfish Twofish) encRound(r0 uint32, r1 uint32, r2 *uint32, r3 *uint32, r uint32) {
	var t0, t1 uint32
	t0 = tfish.gFunc(r0)
	t1 = tfish.gFunc(rol32(r1, 8))
	*r2 = ror32(*r2^(t0+t1+tfish.k0[2*r+8]), 1)
	*r3 = rol32(*r3, 1) ^ (2*t1 + t0 + tfish.k0[2*r+9])
}

func (tfish Twofish) decRound(r0 uint32, r1 uint32, r2 *uint32, r3 *uint32, r uint32) {
	var t0, t1 uint32
	t0 = tfish.gFunc(r0)
	t1 = tfish.gFunc(rol32(r1, 8))
	*r2 = rol32(*r2, 1) ^ (t0 + t1 + tfish.k0[2*r+8])
	*r3 = ror32(*r3^(t0+2*t1+tfish.k0[2*r+9]), 1)
}

func (tfish Twofish) EncryptBlock(p *TfBlock) {
	var r0, r1, r2, r3 uint32
	r0 = uint32(p[0]) | (uint32(p[1]) << 8) | (uint32(p[2]) << 16) | (uint32(p[3]) << 24)
	r1 = uint32(p[4]) | (uint32(p[5]) << 8) | (uint32(p[6]) << 16) | (uint32(p[7]) << 24)
	r2 = uint32(p[8]) | (uint32(p[9]) << 8) | (uint32(p[10]) << 16) | (uint32(p[11]) << 24)
	r3 = uint32(p[12]) | (uint32(p[13]) << 8) | (uint32(p[14]) << 16) | (uint32(p[15]) << 24)
	r3 ^= tfish.k0[3]
	r2 ^= tfish.k0[2]
	r1 ^= tfish.k0[1]
	r0 ^= tfish.k0[0]
	tfish.encRound(r0, r1, &r2, &r3, 0)
	tfish.encRound(r2, r3, &r0, &r1, 1)
	tfish.encRound(r0, r1, &r2, &r3, 2)
	tfish.encRound(r2, r3, &r0, &r1, 3)
	tfish.encRound(r0, r1, &r2, &r3, 4)
	tfish.encRound(r2, r3, &r0, &r1, 5)
	tfish.encRound(r0, r1, &r2, &r3, 6)
	tfish.encRound(r2, r3, &r0, &r1, 7)
	tfish.encRound(r0, r1, &r2, &r3, 8)
	tfish.encRound(r2, r3, &r0, &r1, 9)
	tfish.encRound(r0, r1, &r2, &r3, 10)
	tfish.encRound(r2, r3, &r0, &r1, 11)
	tfish.encRound(r0, r1, &r2, &r3, 12)
	tfish.encRound(r2, r3, &r0, &r1, 13)
	tfish.encRound(r0, r1, &r2, &r3, 14)
	tfish.encRound(r2, r3, &r0, &r1, 15)
	r1 ^= tfish.k0[7]
	r0 ^= tfish.k0[6]
	r3 ^= tfish.k0[5]
	r2 ^= tfish.k0[4]
	p[0] = byte(r2)
	p[1] = byte(r2 >> 8)
	p[2] = byte(r2 >> 16)
	p[3] = byte(r2 >> 24)
	p[4] = byte(r3)
	p[5] = byte(r3 >> 8)
	p[6] = byte(r3 >> 16)
	p[7] = byte(r3 >> 24)
	p[8] = byte(r0)
	p[9] = byte(r0 >> 8)
	p[10] = byte(r0 >> 16)
	p[11] = byte(r0 >> 24)
	p[12] = byte(r1)
	p[13] = byte(r1 >> 8)
	p[14] = byte(r1 >> 16)
	p[15] = byte(r1 >> 24)
}

func (tfish Twofish) DecryptBlock(p *TfBlock) {
	var r0, r1, r2, r3 uint32
	r0 = uint32(p[0]) | (uint32(p[1]) << 8) | (uint32(p[2]) << 16) | (uint32(p[3]) << 24)
	r1 = uint32(p[4]) | (uint32(p[5]) << 8) | (uint32(p[6]) << 16) | (uint32(p[7]) << 24)
	r2 = uint32(p[8]) | (uint32(p[9]) << 8) | (uint32(p[10]) << 16) | (uint32(p[11]) << 24)
	r3 = uint32(p[12]) | (uint32(p[13]) << 8) | (uint32(p[14]) << 16) | (uint32(p[15]) << 24)
	r3 ^= tfish.k0[7]
	r2 ^= tfish.k0[6]
	r1 ^= tfish.k0[5]
	r0 ^= tfish.k0[4]
	tfish.decRound(r0, r1, &r2, &r3, 15)
	tfish.decRound(r2, r3, &r0, &r1, 14)
	tfish.decRound(r0, r1, &r2, &r3, 13)
	tfish.decRound(r2, r3, &r0, &r1, 12)
	tfish.decRound(r0, r1, &r2, &r3, 11)
	tfish.decRound(r2, r3, &r0, &r1, 10)
	tfish.decRound(r0, r1, &r2, &r3, 9)
	tfish.decRound(r2, r3, &r0, &r1, 8)
	tfish.decRound(r0, r1, &r2, &r3, 7)
	tfish.decRound(r2, r3, &r0, &r1, 6)
	tfish.decRound(r0, r1, &r2, &r3, 5)
	tfish.decRound(r2, r3, &r0, &r1, 4)
	tfish.decRound(r0, r1, &r2, &r3, 3)
	tfish.decRound(r2, r3, &r0, &r1, 2)
	tfish.decRound(r0, r1, &r2, &r3, 1)
	tfish.decRound(r2, r3, &r0, &r1, 0)
	r1 ^= tfish.k0[3]
	r0 ^= tfish.k0[2]
	r3 ^= tfish.k0[1]
	r2 ^= tfish.k0[0]
	p[0] = byte(r2)
	p[1] = byte(r2 >> 8)
	p[2] = byte(r2 >> 16)
	p[3] = byte(r2 >> 24)
	p[4] = byte(r3)
	p[5] = byte(r3 >> 8)
	p[6] = byte(r3 >> 16)
	p[7] = byte(r3 >> 24)
	p[8] = byte(r0)
	p[9] = byte(r0 >> 8)
	p[10] = byte(r0 >> 16)
	p[11] = byte(r0 >> 24)
	p[12] = byte(r1)
	p[13] = byte(r1 >> 8)
	p[14] = byte(r1 >> 16)
	p[15] = byte(r1 >> 24)
}

// Cipher block chaining (CBC) routines, not part of standard Twofish

func (tfish Twofish) CbcEncrypt(p []byte) []byte {
	var i, j, k, l, n uint32
	var cbc, tmp TfBlock
	var outp []byte
	var inp []byte
	l = uint32(len(p))
	if l > 0 {
		j = TwofishBlocksize - (l % TwofishBlocksize)
		if j == 0 {
			j = TwofishBlocksize
		}
		inp = make([]byte, l+j)
		for i = 0; i < l; i++ {
			inp[i] = p[i]
		}
		for i = l; i < l+j; i++ {
			inp[i] = byte(j)
		}
		outp = make([]byte, l+j)
		k, i = 0, 0

		copy(cbc[:], tfish.c0[:])
		for i < l+j {
			for n = 0; n < TwofishBlocksize; n++ {
				tmp[n] = inp[n+k]
			}
			k += TwofishBlocksize
			for n = 0; n < TwofishBlocksize; n++ {
				tmp[n] ^= cbc[n]
			}
			tfish.EncryptBlock(&tmp)
			for n = 0; n < TwofishBlocksize; n++ {
				outp[n+i] = tmp[n]
			}
			i += TwofishBlocksize
			copy(cbc[:], tmp[:])
		}
	}
	return outp
}

func (tfish Twofish) CbcDecrypt(p []byte) []byte {
	var b, k, l, n uint32
	var cbc1, cbc2, tmp TfBlock
	var outp []byte
	l = uint32(len(p))
	if l > 0 {
		k = 0
		copy(cbc1[:], tfish.c0[:])
		for k < l {
			for n = 0; n < TwofishBlocksize; n++ {
				tmp[n] = p[n+k]
			}
			copy(cbc2[:], tmp[:])
			tfish.DecryptBlock(&tmp)
			for n = 0; n < TwofishBlocksize; n++ {
				tmp[n] ^= cbc1[n]
			}
			outp = append(outp, tmp[:]...)
			copy(cbc1[:], cbc2[:])
			k += TwofishBlocksize
		}
		// Cut off trailing bytes if necessary
		k = uint32(len(outp))
		b = uint32(outp[k-1])
		if b < TwofishBlocksize && b < k {
			outp = outp[:k-b]
		}
	}
	return outp
}
